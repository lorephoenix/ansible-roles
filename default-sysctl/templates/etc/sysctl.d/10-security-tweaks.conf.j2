
# This file is managed by Ansible.
# Do not edit this file manually.
# Any changes will be automatically reverted.
#

### KERNEL
##########

# Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
# /proc/modules, etc), and this setting can censor the addresses. A value
# of "0" allows all users to see the kernel addresses. A value of "1"
# limits visibility to the root user, and "2" blocks even the root user.
kernel.kptr_restrict                    = {{ kernel_kptr_restrict }}

# randomizes addresses of mmap base, heap, stack and VDSO page
kernel.randomize_va_space               = {{ kernel_randomize_va_space }}

### Filesystem
###############

# These settings eliminate an entire class of security vulnerability:
# time-of-check-time-of-use cross-privilege attacks using guessable
# filenames (generally seen as "/tmp file race" vulnerabilities).
fs.protected_hardlinks                  = {{ fs_protected_hardlinks }}
fs.protected_symlinks                   = {{ fs_protected_symlinks }}
fs.suid_dumpable                        = {{ fs_suid_dumpable }}

### NETWORK
###########

## Uncomment the next line to enable packet forwarding for IPv4
## Must be enabled for Docker daemon
net.ipv4.ip_forward                     = {{ net_ipv4_ip_forward }}

## Turn on SYN-flood protections.  Starting with 2.6.26, there is no loss
## of TCP functionality/features under normal conditions.  When flood
## protections kick in under high unanswered-SYN load, the system
## should remain more stable, with a trade off of some loss of TCP
## functionality/features (e.g. TCP Window scaling).
net.ipv4.tcp_syncookies                 = {{ net_ipv4_tcp_syncookies }}

## Aditional SYN-flood mitigation. Disable if problems arise.
net.ipv4.tcp_syn_retries                = {{ net_ipv4_tcp_syn_retries }}
net.ipv4.tcp_synack_retries             = {{ net_ipv4_tcp_synack_retries }}
net.ipv4.tcp_max_syn_backlog            = {{ net_ipv4_tcp_max_syn_backlog }}

## protect against tcp time-wait assassination hazards
## drop RST packets for sockets in the time-wait state
## (not widely supported outside of linux, but conforms to RFC)
net.ipv4.tcp_rfc1337                    = {{ net_ipv4_tcp_rfc1337 }}

## sets the kernels reverse path filtering mechanism to value 1(on)
## will do source validation of the packet's recieved from all the interfaces on the machine
## protects from attackers that are using ip spoofing methods to do harm
net.ipv4.conf.all.rp_filter             = {{ net_ipv4_conf_all_rp_filter }}
net.ipv6.conf.all.rp_filter             = {{ net_ipv6_conf_all_rp_filter }}

## These might cause problems with Docker
##########################################

## Do not send ICMP redirects (we are not a router)
net.ipv4.conf.all.send_redirects        = {{ net_ipv4_conf_all_send_redirects }}

## Do not accept IP source route packets (we are not a router)
net.ipv4.conf.all.accept_source_route   = {{ net_ipv4_conf_all_accept_source_route }}

# Don't relay bootp
net.ipv4.conf.all.bootp_relay           = {{ net_ipv4_conf_all_bootp_relay }}
